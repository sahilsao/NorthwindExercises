@page "/exercises/exercise36"

@using Microsoft.EntityFrameworkCore.Internal

@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using NorthwindExercises.Context;
@using NorthwindExercises.Entities;


@inject NavigationManager NavigationManager
@inject IDbContextFactory<DbContextNorthwind> DbContextFactory

<PageTitle>Exercise 36</PageTitle>

<MudGrid>
    <MudItem>
        <MudStack>
            <MudText Typo="Typo.h6" Color="Color.Primary">Exercise</MudText>
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.body2">36. Create a report that shows the EmployeeID, the LastName and FirstName
                        as employee, and the LastName and FirstName of
                        who they report to as manager from the employees table sorted by Employee
                        ID. HINT: This is a SelfJoin.
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    @if (EmployeesReportsTo == null)
                    {
                        <MudButton Disabled="@_processing" Variant="Variant.Text" OnClick="@GetDetailsAsync"
                            Color="Color.Primary">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Solution</MudText>
                            }
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>

            @if (EmployeesReportsTo != null)
            {
                <MudText Typo="Typo.h6" Color="Color.Primary">Solution</MudText>
                <MudPaper Class="pa-3">
                    <MudTable Items="EmployeesReportsTo" Hover="true" Elevation="0">
                        <HeaderContent>
                            <MudTh>Employee ID</MudTh>
                            <MudTh>Employee</MudTh>
                            <MudTh>Manager</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Employee ID">@context.EmployeeId</MudTd>
                            <MudTd DataLabel="Employee">@context.Employee</MudTd>
                            <MudTd DataLabel="Manager">@context.Manager</MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No records found.</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            }
        </MudStack>
    </MudItem>
    <MudSpacer />
</MudGrid>

@code {

    private bool _processing = false;
    private class EmployeeReportDto
    {
        public int EmployeeId { get; set; }
        public string Employee { get; set; } = string.Empty;
        public string? Manager { get; set; }
    }
    private List<EmployeeReportDto>? EmployeesReportsTo { get; set; }
    private async Task GetDetailsAsync()

    {
        _processing = true;

        // Simulate processing delay
        await Task.Delay(500);

        await using var dbContext = await DbContextFactory.CreateDbContextAsync();

        EmployeesReportsTo = await dbContext.Employees
        .OrderBy(a => a.EmployeeId)
        .Select(a => new EmployeeReportDto
        {
            EmployeeId = a.EmployeeId,
            Employee = a.LastName + " " + a.FirstName,
            Manager = a.ReportsToNavigation != null ? a.ReportsToNavigation.LastName + " " + a.ReportsToNavigation.FirstName : null
        })
        .ToListAsync();

        _processing = false;
    }


}